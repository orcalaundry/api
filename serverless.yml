service: rc4laundry-api-aws
frameworkVersion: "2 || 3"
# Load variables from .env file. They can be referenced in this file as ${env:SOME_VAR}.
useDotenv: true

custom:
  # Default to "dev" as the stage, unless the `--stage` option is used.
  stage: ${opt:stage, 'dev'}
  # usageTable is the name of the dynamodb table storing usage records.
  usageTable: usage-table-${self:custom.stage}
  # Bundles dependencies from requirements.txt and adds them to PYTHONPATH.
  # See https://www.serverless.com/blog/serverless-python-packaging/ for more info.
  pythonRequirements:
    dockerizePip: true # We don't really need this, but it somehow doesn't work without it.
    slim: true # Remove tests, info, and cache files.
  # This does not refer to the dynamodb in AWS. It is for serverless-dynamodb-local.
  dynamodb:
    stages:
      - dev
    start:
      port: 8001
      migrate: true
  # Keep only 1 other version.
  prune:
    automatic: true
    number: 1

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: "20201221"
  region: ap-southeast-1
  stage: ${self:custom.stage}
  environment:
    REDIS_HOST: ${env:REDIS_HOST}
    REDIS_PORT: ${env:REDIS_PORT}
    REDIS_DB: ${env:REDIS_DB}
    REDIS_PASS: ${env:REDIS_PASS}
    API_KEY: ${env:API_KEY}
    DYNAMODB_REGION: ${self:provider.region}
    DYNAMODB_USAGE_TABLE: ${self:custom.usageTable}
  # This is the default IAM Role used by all lambda functions. Give them
  # permissions on UsageTable in dynamodb.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        # Get the Amazon Resource Name of UsageTable.
        - "Fn::GetAtt": [UsageTable, Arn]

resources:
  Resources:
    UsageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # `loc` is an identifier for the location of the machine, and should take the format {floor}:{position}.
        AttributeDefinitions:
          - AttributeName: loc
            AttributeType: S
          - AttributeName: started_at
            AttributeType: S
        KeySchema:
          - AttributeName: loc
            KeyType: HASH
          - AttributeName: started_at
            KeyType: RANGE
        # Should be free with the amount of traffic we expect.
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.usageTable}

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-local
  - serverless-prune-plugin

package:
  exclude:
    - node_modules/**
    - venv/**
    - .pytest_cache/**
    - .env*
    - README.md
    - tests/**
    - .dynamodb/**
    - "**/__pycache__/**"

functions:
  # Deploy the entire FastAPI app as one serverless function.
  app:
    handler: app.main.handler
    events:
      - httpApi:
          method: get
          path: /
      - httpApi:
          method: any
          path: /{proxy+}
    maximumRetryAttempts: 0
